# [383\. Ransom Note](https://leetcode.com/problems/ransom-note/)

## Description

Difficulty: **Easy**  

Related Topics: [Hash Table](https://leetcode.com/tag/hash-table/), [String](https://leetcode.com/tag/string/), [Counting](https://leetcode.com/tag/counting/)


Given two strings `ransomNote` and `magazine`, return `true` _if_ `ransomNote` _can be constructed by using the letters from_ `magazine` _and_ `false` _otherwise_.

Each letter in `magazine` can only be used once in `ransomNote`.

**Example 1:**

```
Input: ransomNote = "a", magazine = "b"
Output: false
```

**Example 2:**

```
Input: ransomNote = "aa", magazine = "ab"
Output: false
```

**Example 3:**

```
Input: ransomNote = "aa", magazine = "aab"
Output: true
```

**Constraints:**

*   1 <= ransomNote.length, magazine.length <= 10<sup>5</sup>
*   `ransomNote` and `magazine` consist of lowercase English letters.


## Solution

Language: **Java**

```java
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        HashMap<Character,Integer> map = new HashMap<>();
        HashMap<Character,Integer>map2 = new HashMap<>();
        int r = ransomNote.length();
        int m = magazine.length();
        for(int i=0; i<m; i++){
            char ch = magazine.charAt(i);
            map.put(ch,map.getOrDefault(ch,0)+1);
        }
        
        for(int i=0; i<r; i++){
            char ch = ransomNote.charAt(i);
            if(!map.containsKey(ch)|| map.get(ch)==0){
                return false;
            }
            map.put(ch,map.getOrDefault(ch,0)-1);
        }
               return true;
    }
}
```

class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        HashMap<Character,Integer> map = new HashMap<>();
        for(char ch : magazine.toCharArray()){
            map.put(ch,map.getOrDefault(ch,0)+1);
        }
        
        for(char ch : ransomNote.toCharArray()){
            if(!map.containsKey(ch)|| map.get(ch)==0){
                return false;
            }
            map.put(ch,map.getOrDefault(ch,0)-1);
        }
               return true;
    }
}

optimized


class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
      int arr [] = new int[26];
        for(char ch : magazine.toCharArray()){
            arr[ch-'a']++;
        }
        
        for(char ch : ransomNote.toCharArray()){
            if(arr[ch-'a']==0) return false;
            else arr[ch-'a']--;
        }
               return true;
    }
}